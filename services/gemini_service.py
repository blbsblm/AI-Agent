import google.generativeai as genai
import asyncio
from typing import List  # Added to fix NameError
from utils.config import Config

class GeminiAIService:
    """Service d'int√©gration avec l'API Gemini de Google"""
    
    def __init__(self):
        """Initialise le mod√®le Gemini"""
        genai.configure(api_key=Config.GEMINI_API_KEY)
        try:
            self.model = genai.GenerativeModel('gemini-1.5-flash')
        except:
            try:
                self.model = genai.GenerativeModel('gemini-1.5-pro')
            except:
                try:
                    self.model = genai.GenerativeModel('models/gemini-1.5-flash')
                except:
                    self.model = None
                    print("‚ùå Aucun mod√®le Gemini disponible")
    
    async def generer_reponse_culinaire(self, requete: str, recettes_context: str = "") -> str:
        """G√©n√®re une r√©ponse culinaire en utilisant Gemini"""
        if self.model is None:
            return "‚ùå Mod√®le Gemini non disponible. V√©rifiez votre cl√© API et la connexion internet."
        
        try:
            prompt = f"""
            Tu es un assistant culinaire expert, passionn√© et cr√©atif. Tu dois r√©pondre de mani√®re naturelle et conversationnelle.
            
            CONTEXTE - Recettes disponibles dans la base de donn√©es:
            {recettes_context}
            
            QUESTION DE L'UTILISATEUR: {requete}
            
            INSTRUCTIONS IMPORTANTES:
            - R√©ponds TOUJOURS en fran√ßais
            - Sois naturel, amical et enthousiaste
            - Si la question concerne une recette sp√©cifique de la base, utilise ces informations
            - Si la question est g√©n√©rale sur la cuisine, donne des conseils cr√©atifs et pratiques
            - Pour les recommandations, sois cr√©atif et propose des id√©es originales
            - Utilise des emojis pour rendre tes r√©ponses plus engageantes
            - Adapte ton ton √† la question (conseil, recette, technique, etc.)
            - Si tu ne trouves pas d'info dans la base, propose des alternatives cr√©atives
            - √âvite les r√©ponses trop longues, reste concis mais informatif
            
            R√©ponds comme un vrai chef cuisinier passionn√© qui adore partager ses connaissances !
            """
            response = await asyncio.to_thread(self.model.generate_content, prompt)
            return response.text
        except Exception as e:
            error_msg = str(e)
            if "404" in error_msg:
                return """‚ùå **Erreur de mod√®le Gemini**
                
üîß **Solutions possibles :**
1. V√©rifiez que votre cl√© API Gemini est valide
2. Assurez-vous d'avoir acc√®s aux mod√®les Gemini 1.5
3. V√©rifiez votre connexion internet
4. La cl√© API doit avoir les permissions pour Gemini

üí° **Mod√®les test√©s :** gemini-1.5-flash, gemini-1.5-pro"""
            return f"ü§ñ Erreur technique: {error_msg}\n\nüí° V√©rifiez votre configuration Gemini."
    
    async def suggerer_recette_ia(self, ingredients: List[str] = None, preferences: str = "") -> str:
        """Sugg√®re une recette originale via Gemini"""
        if self.model is None:
            return "‚ùå Mod√®le Gemini non disponible"
        
        try:
            prompt = f"""
            Tu es un chef cuisinier cr√©atif. Cr√©e une suggestion de recette originale.
            
            Ingr√©dients disponibles: {', '.join(ingredients) if ingredients else 'Aucun sp√©cifi√©'}
            Pr√©f√©rences: {preferences}
            
            Cr√©e une suggestion courte et attrayante avec:
            - Nom de la recette
            - Temps de pr√©paration estim√©
            - Niveau de difficult√©
            - Une phrase d'accroche app√©tissante
            
            Format: üçΩÔ∏è **Nom** (Temps min, Difficult√©) - Description courte
            """
            response = await asyncio.to_thread(self.model.generate_content, prompt)
            return response.text
        except Exception as e:
            return "ü§ñ Impossible de g√©n√©rer une suggestion pour le moment."